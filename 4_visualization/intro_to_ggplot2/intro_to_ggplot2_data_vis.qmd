---
title: "Intro to ggplot2 for R data visualizations"
format: gfm
editor: source
---

```{r settings, echo=FALSE, include = FALSE}
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE, dpi=700)
```

## Motivation
- human brains are wired to process visual information quickly and recognize patterns
- well designed data visualizations can often bring a story to life and assist with further insights investigation
- ggplot2 is a popular R package for data visualization and a useful tool for analysts to have in their toolbox

## ggplot2 Overview

-   ggplot2 created by Hadley Wickham and part of the R tidyverse ecosystem
-   [package documentation and further learning resources](https://ggplot2.tidyverse.org/)
-   by default, tidy data input format expected (e.g. observations as rows and variables as columns)
-   pros
    -   open-source and free
    -   101 level knowledge can help analysts produce business value quickly
    -   used to output publication worthy visualizations for tech and non-tech audiences
    -   highly flexible and customizable
    -   robust documentation, blog content, and community support (which means lots of training data for GenAI tools)
    -   high ROI on learning time invested; analysts can use the package across companies (vs paid data vis tools which company A may use but not company B)
    -   [rich collection of extension packages](https://exts.ggplot2.tidyverse.org/gallery/) (e.g. patchwork, gganimate, ggforce, ggtext, etc)
    -   can be used to produce static and interactive visualizations for a wide range of data types (e.g. time series, geospatial, etc)
    -   proficient users can produce complex visualizations with a few lines of code (often faster than other data vis tools)
-   cons
    -   often requires some R coding skills for data input prep (R is known to have a slow / steep learning curve)
    -   advanced custom plots require deep knowledge of package nuances (which can be hard to remember); tools like Github Copilot reducing the cognitive load here
    -   plot outputs to Google Docs or Slides require partially manual workflow
    -   analyst-to-analyst shareability can be a challenge if the recipient is not familiar with R/ggplot2 (Google Sheets, GUI based tools, etc often more accessible across data teams)

## Key Components

-   **layers:** ggplot builds plots layer by layer in a logical order
-   **aesthetics mapping (aes):** instructions for how the data will map to a graphic (axis, colors, shapes, lines, etc)
-   **geometries (geoms)**: determines the graphic used to visually display the data
-   **facets**: used to split data into subplots based on 1 or more variables
-   **labs:** title, axis names, captions, legend titles, etc.
-   **themes**: used to reduce visual noise, add polish, and tweak formatting

## Packages

```{r packages}
# ggplot2 included in the tidyverse package
required_packages <- c('tidyverse', 'janitor', 'skimr', 'patchwork',
                       'rvest', 'directlabels', 'ggrepel', 'ggpubr')

### check for required packages and install them if they are not already installed
### not a best practice in general, but useful for folks getting started with R
for(p in required_packages) {
  if(!require(p,character.only = TRUE)) 
        install.packages(p, repos = "http://cran.us.r-project.org")
  library(p,character.only = TRUE)
}
```

## Practice Dataset 1

-   sample of Vinho Verde red wine ratings and chemical properties
-   UCI ML dataset (more details [here](https://archive.ics.uci.edu/ml/datasets/Wine+Quality))
-   code to access and clean the data hidden to keep the focus on ggplot2 (visible in notebook source code)

```{r wine_ratings_data, include=T, echo=F}
### read in the red wine dataset using csv location URL 
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
rw_df <- read_delim(url, delim=";")

### clean up column names automatically
rw_df <- rw_df %>% janitor::clean_names()

### Uncomment lines below output dataset info directly in the notebook
# url_2 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality.names"
# read_lines(url_2)

### tails of the rating distribution are sparse
### re-categorize to make the data more balanced and easier to visualize
rw_df <- rw_df %>%
    ### SQL like case statement to create a new column
    mutate(quality_group = case_when(
            quality<=4 ~ "3 to 4",
            quality==5~ "5",
            quality==6 ~ "6",
            quality>6 ~ "7 to 8"),
           ### converts character column to a factor with level orderings
           ### level ordering used downstream for logical plot ordering
           quality_group = factor(quality_group, levels=c("3 to 4", "5", "6", "7 to 8")))

### view the dataset, observation count, column counts, data types, etc
glimpse(rw_df)
```

## Summary Stats
-   not leveraging ggplot2 here
-   quick context building step to get a feel for the dataset

```{r summary_stats}
### visually appeal summary
rw_df %>%
  # approach to quickly produce summary stats
  skimr::skim_without_charts() %>%
  # return the numeric subtable produced by skim above
  yank("numeric") %>%
  # no missing data and all variables have a complete rate of 1
  select(-n_missing, -complete_rate) %>%
  # rounds numeric columns to 2 decimal places
  mutate_if(is.numeric, ~round(., 2)) %>%
  # used to produce user friendly output table
  knitr::kable()

### faster way to produce summary stats with 1 line code
### but less visually appealing output
# summary(rw_df)
```

## Building the Layers Step by Step
- 9 steps to build and save a ggplot2 plot image

1.  pipe (`%>%`) a dataset into ggplot

```{r step1}
### outputs blank plot object with no data mapping
rw_df %>%
  ggplot()
```

2.  set mapping for how the data will be visually represented

```{r step2}
# add x and y axis mapping to blank plot object (called aesthetics mapping)
rw_df %>%
  ggplot(aes(x = volatile_acidity, y = alcohol))
```

3.  specify a geom (e.g. graphic type) to visually represent the data

```{r step3}
# adds points to the plot object with x and y axis mapped
rw_df %>%
  ggplot(aes(x = volatile_acidity, y = alcohol)) +
  geom_point()
```

4.  adjust point size and alpha parameter to handle overplotting

```{r step4}
# darker region highlights the primary cluster of data
rw_df %>%
  ggplot(aes(x = volatile_acidity, y = alcohol)) +
  geom_point(size = 0.9, alpha = 0.4)
```

5.  use color to distinguish between different quality groups

```{r step5}
# set color to quality_group within the aesthetics mapping logic
rw_df %>%
  ggplot(aes(x = volatile_acidity, y = alcohol, color = quality_group)) +
  geom_point(size = 0.9, alpha = 0.4)
```

6.  use facets to split the data into subplots based on quality group

-   overplotting on above iteration making it hard to see differences between quality groups

```{r step6}
rw_df %>%
  ggplot(aes(x = volatile_acidity, y = alcohol, color = quality_group)) +
  # drop legend to reduce visual noise; facet headers provide the same info
  geom_point(size = 0.9, alpha = 0.4, show.legend = F) +
  theme(legend.position = "top") +
  # split the data into subplots based on quality group
  # facet_wrap or facet_grid are the most common facet functions
  facet_wrap(. ~ quality_group, ncol = 2)
```

7.  add median vertical and horizontal lines to enhance group vs group comparison

```{r step7}
rw_df %>%
  ggplot(aes(x = volatile_acidity, y = alcohol, color = quality_group)) +
  geom_point(size = 0.9, alpha = 0.4, show.legend = F) +
  ### dynamically add median reference lines
  geom_vline(aes(xintercept = median(volatile_acidity)), 
             linetype = "dashed", color = "grey40") +
  geom_hline(aes(yintercept = median(alcohol)), 
                 linetype = "dashed", color = "grey40") +
  facet_wrap(. ~ quality_group, ncol = 2)
```

8.  add titling and finalize styling

```{r step8}
### assign plot object to a variable (used downstream)
p1 <- rw_df %>%
  ggplot(aes(x = volatile_acidity, y = alcohol, color = quality_group)) +
  ### note linetype aes mapping "hack" to surface the median legend title
  geom_vline(aes(xintercept = median(volatile_acidity), 
                 linetype = "Median"), color = "grey40",
                 show.legend = F) +
  geom_hline(aes(yintercept = median(alcohol), 
                 linetype = "Median"), color = "grey40") +
  geom_point(size = 0.9, alpha = 0.4, show.legend = F) +
  facet_wrap(. ~ quality_group, ncol = 2) +
  labs(title = "Red Wine Alcohol and Volatile Acidity by Quality Group",
       subtitle = "top rated wines tend to have lower volatile acidity and higher alcohol %",
       linetype = "",
       x = "Volatile Acidity",
       y = "Alcohol %")

### return plot object
p1
```

9.  save the plot as an image file

```{r step9}
### saved to working directory
ggsave("red_wine_quality_group_alcohol_and_va.png", p1, width = 10, height = 6)
```


## Common Visualization Use Cases

### Bar Charts
- Basic out of the box bar chart
```{r basic_bar_chart}
rw_df %>%
  ggplot(aes(x = quality_group)) +
  ### stat = "count" is the default, included to be explicit
  ### counts number of observations in each x axis variable
  geom_bar(stat = "count") +
  labs(title = "Red Wine Quality Group Counts",
       x = "Quality Group",
       y = "Count")
```

- Elevated / custom bar chart design
```{r custom_bar_chart}
rw_df %>%
  ggplot(aes(x = quality_group)) +
  ### alpha adjusts the transparency of the bars
  geom_bar(stat = "count", alpha = 0.75, show.legend = F, fill = "dodgerblue") +
  ### add counts slightly below the top of each bar
  geom_text(
    stat = "count",   
    aes(
        label = paste0("n=", after_stat(count)),
        y = after_stat(count)
      ), 
    vjust = 1.5
  ) +
  ### add percent total labels to the top of each bar
  geom_text(
    stat = "count",   
    aes(
        label = scales::percent(
            after_stat(count)/sum(after_stat(count)),
            accuracy = 1
          ),
        y = after_stat(count)
      ), 
    vjust = -0.5
  ) +
  ### increase font size of x axis and remove y axis labels and ticks
  theme(axis.text.x = element_text(size = 12),
        axis.ticks.y = element_blank(),
        axis.text.y = element_blank()) +
  ### add padding/space to y axis 
  scale_y_continuous(expand = expansion(mult = c(0.05, 0.1))) +
  ### add title and axis labels
  labs(title = "Red Wine Quality Distribution",
       x = "Quality Group",
       y = "Count & Percent Total")
```

### Histogram
- Basic histogram
```{r basic_histogram}
rw_df %>%
  ggplot(aes(x = alcohol)) +
  geom_histogram(binwidth = 0.4) +
  labs(title = "Red Wine Alcohol Distribution",
       x = "Alcohol %",
       y = "Count")
```
- Elevated / custom histogram design
```{r custom_histogram}
# mean alcohol % by quality_group
# used for avg vertical line reference on histogram below
alcohol_means <- rw_df %>%
  group_by(quality_group) %>%
  summarise(mean_alcohol = mean(alcohol))

# Plotting
rw_df %>%
  ggplot(aes(x = alcohol)) +
  geom_histogram(aes(fill = quality_group), binwidth = 0.4, alpha = 0.5, show.legend = F) +
  ### add vertical line for average alcohol % by quality group
  ### geom_vline leverages the alcohol_means data frame (intermediate technique)
  geom_vline(data = alcohol_means, 
             aes(xintercept = mean_alcohol, group = quality_group, 
                 color = "Average Alochol % by Quality Group"),
             linetype = "dashed") +
  ### scale free_y allows each quality group to have different y axis scale
  ### useful when group counts vary
  facet_grid(quality_group ~ ., scale = "free_y") +
  ### add padding/space to y axis 
  scale_y_continuous(expand = expansion(mult = c(0.05, 0.2))) +
  theme(legend.position = "top",
        axis.text.y = element_text(size = 6)) +
  ### add titles and axis labels
  labs(title = "Red Wine Alcohol % Distribution by Quality Group",
       x = "Alcohol %",
       y = "Count",
       color = "")
```

#### Boxplots

- Basic boxplot
```{r basic_boxplot}
rw_df %>%
  ggplot(aes(x = quality_group, y = sulphates)) +
  geom_boxplot() +
  labs(title = "Red Wine Sulphates Distribution by Quality Group",
       x = "Quality Group",
       y = "Sulphates")
```

```{r custom_boxplot}
### create a long data format
custom_boxplot_setup <- rw_df %>%
      select(-quality) %>%
      pivot_longer(cols = -quality_group, names_to = "metric", values_to = "value") %>%
      group_by(quality_group, metric) %>%
      summarise(y0 = min(value),
                y25 = quantile(value, 0.25),
                y50 = median(value),
                y75 = quantile(value, 0.75),
                y100 = max(value), 
                .groups = 'drop')

custom_boxplot_setup %>%  
  ggplot(aes(x=quality_group, color=quality_group)) +
      geom_boxplot(
         # small hack here: set the min to q25 var and max to q75 var 
         # this prevents the whiskers from showing on the plot
         aes(ymin = y25, lower = y25, middle = y50, upper = y75, ymax = y75),
         stat = "identity") +
      ### cleans up variable names in the facet title strips
      facet_wrap(. ~ str_to_title(str_replace_all(metric, "_", " ")), scale="free") +
      labs(title="IQR Plots by Quality Rating and Metric",
           y="Metric Value",
           x="Quality Rating Group") +
      theme(legend.position = "none")
```

## Practice Dataset 2
- sticking to the wine theme, we'll use yearly California and US wine production [data from the Wine Institute](https://wineinstitute.org/our-industry/statistics/california-us-wine-production/)
- the data is in a table on the website, so we'll use the rvest package to scrape the data (thanks to GH Copilot and ChatGPT this is low lift)
- code to scrape and format the data hidden to keep the focus on ggplot2 visualization

```{r wine_production_data, include=T, echo=F}
# Define the data table URL location
url <- "https://wineinstitute.org/our-industry/statistics/california-us-wine-production/"

# Read the HTML content from the URL
page <- read_html(url)

# Extract the table. Since there's a specific table class, it's easier to target.
table <- page %>% 
  html_nodes(xpath = "//table[@class='table--alt']") %>% 
  html_table()

# The html_table() function parses the table directly into a dataframe
wine_data <- table[[1]]

# clean column names and format chr columns to numeric
us_and_ca_wine_production <- wine_data %>% 
  janitor::clean_names() %>%
  mutate(california_wine = parse_number(california)/10^6,
         us_wine = parse_number(u_s)/10^6,
         year = as.numeric(year),
         .keep = "unused") %>%
  ### pivot the data from wide to long format
  pivot_longer(cols = c("california_wine", "us_wine"),
               names_to = "wine_segment",
               values_to = "wine_production") %>%
  ### use case when to create cleaner wine segment names
  mutate(wine_segment = case_when(
    wine_segment == "california_wine" ~ "CA Wine",
    wine_segment == "us_wine" ~ "US Wine"
  )) %>%
  ### set wine segment to factor with order us and then ca
  mutate(wine_segment = factor(wine_segment, levels = c("US Wine", "CA Wine")))

us_and_ca_wine_production %>% glimpse()
```

#### Time Series Trends
- Basic time series line plot
```{r basic_line_plot}
us_and_ca_wine_production %>%
  ggplot(aes(x = year, y = wine_production, color = wine_segment)) +
  geom_line() +
  labs(title = "California and US Wine Production",
       x = "Year",
       y = "Wine Production (Millions of Gallons)",
       color = "Wine Segment")
```
- Elevated / custom line plot design
```{r custom_line_plot}
us_and_ca_wine_production %>%
  ggplot(aes(x = year, y = wine_production, 
             color = wine_segment, shape = wine_segment)) +
  geom_line(alpha = 0.4) +
  geom_point(size = 1.75) +
  ### rotate y axis title to be horizontal
  theme(axis.title.y = element_text(angle = 0, vjust = 0.5),
        ### rotate x axis text to be slanted 45 degrees
        axis.text.x = element_text(angle = 45, hjust = 1, size = 6),
        ### drop plot minor background horizontal lines
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        panel.grid.minor.x = element_blank(),
        legend.position = "top") +
  ### set x axis breaks to be every year
  scale_x_continuous(breaks = seq(1995, 2022, 1)) +
  ### color and shape manual scales to set custom colors and shapes
  scale_color_manual(values = c("US Wine" = "grey40", "CA Wine" = "forestgreen")) +
  ### add y axis labels to both the left and right side of plot
  scale_y_continuous(sec.axis = sec_axis(~ ., name = "")) +
  ### add titles and axis labels
  labs(title = "California and US Wine Production Volume Trend",
       x = "Year",
       y = "Wine Production\n(Millions of\nGallons)",
       color = "Wine Segment",
       shape = "Wine Segment")
```

#### Scatterplots

- Basic scatterplot
```{r basic_scatterplot}
us_and_ca_wine_production %>%
  ### pivot the data from long to wide format
  pivot_wider(names_from = wine_segment, values_from = wine_production) %>%
  ggplot(aes(x = `CA Wine`, y = `US Wine`)) +
  geom_point() +
  labs(title = "California and US Wine Production Relationship",
       subtitle = "Wine Production (Millions of Gallons)",
       x = "CA Wine",
       y = "US Wine")
```

- Elevated scatterplot with labels
```{r elevated_scatterplot}
us_and_ca_wine_production %>%
  ### pivot the data from long to wide format
  pivot_wider(names_from = wine_segment, values_from = wine_production) %>%
  mutate(ca_wine_share_label = ifelse(`CA Wine` / `US Wine` >= 0.9, "CA >= 90%", "CA < 90%")) %>%
  ggplot(aes(x = `CA Wine`, y = `US Wine`)) +
  ### work around to use point legend for labels
  geom_point(aes(color = ca_wine_share_label), alpha = 0) +
  ### generates scatter plot with labels and repels them to avoid overlap
  geom_text_repel(aes(label = year, color = ca_wine_share_label), 
                  size = 3, box.padding = 0.05, show.legend = F) +
  ### add spearman correlation
  stat_cor(method = "spearman", p.accuracy = 0.0001) +
  ### break x and y axis by 50
  scale_x_continuous(breaks = seq(0, 1000, 50)) +
  scale_y_continuous(breaks = seq(0, 1000, 50)) +
  theme(legend.position = "top") +
  ### adjust legend alpha to 1 and point size to 3
  guides(color = guide_legend(override.aes = list(alpha = 1, size = 3))) +
  labs(title = "California and US Wine Production Relationship",
       subtitle = "Wine Production (Millions of Gallons)",
       x = "CA Wine",
       y = "US Wine",
       color = "CA Wine Share of US Total",
       caption = "Spearman Correlation")
```

## Sample of intermediate to advanced ggplot2 techniques (future notebook todo)
- additional plot types (heatmaps, geo plots, correlation plots, etc)
- color blind friendly tactics and palettes
- custom ggplot2 functions
- programmatic visualizations (i.e. loop through data and generate plots by category)
- notable extension packages